/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sample.testlink.view;

import br.eti.kinoshita.testlinkjavaapi.util.TestLinkAPIException;
import com.sample.login.view.Login;
import com.sample.testlink.controller.ReadConfigFile;
import com.sample.testlink.controller.ReadTestCase;
import com.sample.testlink.controller.TestResults;
import com.sample.testlink.model.TestLinkIntegration;
import java.awt.Color;
import java.awt.Desktop;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;
import testlink.api.java.client.TestLinkAPIClient;
import testlink.api.java.client.TestLinkAPIResults;

/**
 *
 * @author Dakangwa
 */
public class TestAuto extends javax.swing.JFrame {

    private static long endTime = 0;
    private static long startTime = 0;
    private static long totalTime;
    private static long totalNoTCs;

    private static String TEST_PROJECT_NAME; // declare a variable to hold testProject
    private static String TEST_PLAN_NAME; // declare a variable to hold a testPlan
    private static String BUILD_NAME; // decare a variable to hold testBuild
    private static String TEST_SCRIPT_URL; // decare a variable to hold test script or protocol
    private static String TESTLINK_KEY; // "88061f71968708d4fc36bb3ccd141151";
    private static String chrome_driver;
    private static String firefox_driver;
    //private static long webdriver_timeouts = 0;
    private static String TESTLINK_URL; //"http://localhost/testlink/lib/api/xmlrpc/v1/xmlrpc.php";
    //printLog();

    /**
     * Creates new form TestAuto
     */
    public TestAuto() {

        initComponents();
        AppLogo();
        //textArea.setText("\n====== Welcome to Selenium Test Automation Script =======\n");
        // printLog();
    }

    private void AppLogo() {
        //setIconImage(getToolkit().getImage(getClass().getResource("../shop/images/hms_logo.jpg")));
        setIconImage(getToolkit().getImage(ClassLoader.getSystemClassLoader().getResource("images/destherium-icon.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        openButton = new javax.swing.JButton();
        fileName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        notificationMsg = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton3 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        jMenu4.setText("File");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Destherium Test Automation Tool");

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 0));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Fill in the below project info as design on TestLink tool before running the script;");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 720, 30));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 460, 32));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, 390, 32));
        jPanel1.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 310, 32));

        openButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Excel-import.png"))); // NOI18N
        openButton.setText("Import Script");
        openButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        jPanel1.add(openButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 250, 130, 36));

        fileName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fileName.setText("File Upload Name...");
        jPanel1.add(fileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 250, 280, 36));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Project Name*:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, 32));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Test Plan*:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 111, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Test Build*:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 111, 32));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Upload Test Spec (.xls/xlsx file) below...");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 280, 30));

        jLabel9.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 204));
        jLabel9.setText("Test Results Console:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 180, 23));

        notificationMsg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        notificationMsg.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel1.add(notificationMsg, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 90, 530, 30));

        jToolBar1.setBackground(new java.awt.Color(204, 204, 204));
        jToolBar1.setRollover(true);

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/testlink_73054.png"))); // NOI18N
        jButton3.setToolTipText("Connect to TestLink Web");
        jButton3.setAlignmentX(0.5F);
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setIconTextGap(2);
        jButton3.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton3.setPreferredSize(new java.awt.Dimension(31, 32));
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dialog-cancel.png"))); // NOI18N
        jButton7.setToolTipText("Cancel Test Automation");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow-right.png"))); // NOI18N
        jButton6.setToolTipText("Run Test Project");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);
        jToolBar1.add(jSeparator1);

        jButton5.setBackground(new java.awt.Color(255, 255, 204));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/log-out.png"))); // NOI18N
        jButton5.setToolTipText("Logout");
        jButton5.setAlignmentX(0.5F);
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setIconTextGap(3);
        jButton5.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/helpB.png"))); // NOI18N
        jButton4.setToolTipText("Help");
        jButton4.setAlignmentX(0.5F);
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setIconTextGap(2);
        jButton4.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton4);

        jPanel1.add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 810, 40));

        textArea.setEditable(false);
        textArea.setBackground(new java.awt.Color(0, 0, 0));
        textArea.setColumns(20);
        textArea.setForeground(new java.awt.Color(255, 255, 255));
        textArea.setRows(5);
        textArea.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(textArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Web", jPanel2);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/appium-and-perfecto.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 626, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Mobile", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            fileName.setText(file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }

    }//GEN-LAST:event_openButtonActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        // TODO add your handling code here:

        String URL = "http://localhost/testlink/index.php";
        try {
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(URL));
        } catch (IOException ex) {
            Logger.getLogger(TestAuto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        dispose();
        Login logout = new Login();
        logout.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        try {

            TEST_PROJECT_NAME = jTextField1.getText();
            TEST_PLAN_NAME = jTextField2.getText();
            BUILD_NAME = jTextField3.getText();
            TEST_SCRIPT_URL = fileName.getText();

            //Run the Automation testing
            test();

        } catch (Exception ex) {
            Logger.getLogger(TestAuto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        afterTest();
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TestAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TestAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TestAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TestAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TestAuto().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fileName;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel notificationMsg;
    private javax.swing.JButton openButton;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    public static void openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
            } catch (IOException e) {
            }
        }
    }

    public static void openWebpage(URL url) {
        try {
            openWebpage(url.toURI());
        } catch (URISyntaxException e) {
        }
    }
    /**
     *
     * @return
     */
    WebDriver driver = null;

    protected boolean beforeTest() {
        if (jTextField1.getText().isEmpty() && jTextField2.getText().isEmpty() && jTextField2.getText().isEmpty() && fileName.getText().isEmpty()) {
            notificationMsg.setForeground(Color.red);
            notificationMsg.setText("Error! Test Project, Plan and Build can't be Empty.");
            return false;
        } else if (jTextField1.getText().isEmpty() || jTextField1.getText() == null) {
            notificationMsg.setForeground(Color.red);
            notificationMsg.setText("Error! Fill Test Project name.");
            return false;
        } else if (jTextField2.getText().isEmpty() || jTextField2.getText() == null) {
            notificationMsg.setForeground(Color.red);
            notificationMsg.setText("Error! Fill Test Plan name.");
            return false;
        } else if (jTextField3.getText().isEmpty() || jTextField3.getText() == null) {
            notificationMsg.setForeground(Color.red);
            notificationMsg.setText("Error! Fill Test Build name.");
            return false;
        } else if (fileName.getText().isEmpty() || fileName.getText().equals("File Upload Name...")) {
            notificationMsg.setForeground(Color.red);
            notificationMsg.setText("Error! Upload test files first");
            return false;
        } else {

            System.out.print("We are before Testing");
            textArea.removeAll();
            textArea.setForeground(Color.white);
            textArea.setText("\n Running Automation Script...\n"
                    + " (:- Please Relax while we do the Job for you. -:)\n");
            
            ReadConfigFile prop = new ReadConfigFile();
            firefox_driver = prop.getPropertyValue("firefox_driver");
        //webdriver_timeouts = prop.getPropertyValue("webdriver_timeouts");
            //System.setProperty("webdriver.chrome.driver", chrome_driver);
            System.setProperty("webdriver.gecko.driver", firefox_driver);
            driver = new FirefoxDriver();
            //     driver = new ChromeDriver();
//        System.setProperty("webdriver.chrome.driver", "C:\\Users\\Morph\\Documents\\NetBeansProjects\\library\\chromedriver_win32\\chromedriver.exe");
//       driver = new ChromeDriver();
            
//        if (jTextField1.getText().isEmpty() || jTextField1.getText()==null){
//            return false;
//        }
            return true;
        }

    }

    /**
     *
     */
    protected void afterTest() {

        //textArea.removeAll();
        textArea.setForeground(Color.white);
        textArea.setText("\n Test Automation Script Completed.\n"
                + " Thanks for your Patients.\n");
        //driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
        //jButton6.setEnabled(true);
        //Thread.sleep(10);
        textArea.append("\n \n |================== Test Execution Results Overview =================|\n"
                + "Total Time Elapse : " + totalTime + " Seconds\n"
                + "Total No. Test Case Steps Executed : " + totalNoTCs + " \n"
                + " |________________ Go to TestLink and Check Test results _________________|\n"
        );
        driver.close();// Close the browser instance or Tab in use for automation
        driver.quit();// Quite the Entire Browser and kill the process
    }

    /**
     * Prints log statements for testing in a thread
     */
//    private void printLog() {
//        Thread thread = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                while (true) {
//                    PrintStream standardOut = System.out;
//                    // System.out.println("Time now is " + (new Date()));
//
//                    if (totalNoTCs != 1) {
//                        textArea.append("\n |================== Test Execution Results Overview =================|\n"
//                                + "Total Time ELapse: " + totalTime + "\n"
//                                + "Total No. TCs: " + totalNoTCs + "\n"
//                                + " |________________ Go to TestLink to Check your results ____________________|\n"
//                        );
//                    } //                    else if (totalNoTCs > totalNoTCs + 1) {
//                    //                        textArea.setText("\n==================| Test Results |=================\n"
//                    //                                + "Total Time ELapse: " + totalTime + "\n"
//                    //                                + "Total No. TCs: " + totalNoTCs + "\n"
//                    //                                + "============================================\n");
//                    //                    } 
//                    else {
//                        textArea.setText("\n====== Sorry, No Test Automation Script! =======\n");
//                    }
//                    try {
//                        Thread.sleep(100);
//                    } catch (InterruptedException ex) {
//                        ex.printStackTrace();
//                    }
//                }
//            }
//        });
//        thread.start();
//    }
    /**
     * Method to Loop through all the test cases found in the Excel sheet and
     * Execute the actions respectively.
     *
     * @throws java.lang.Exception
     */
    protected void test() throws Exception {
        boolean nefore = beforeTest();
        if (!nefore) {
        } else {

            //WebDriverWait wait = new WebDriverWait(driver, 100);
            ReadTestCase readbook = new ReadTestCase();
            TestResults testresults = new TestResults();

            String notes, nopagetitle = null;
            String result = null;
//            String startWith ="//input[@value=\"Log in\"]";
//             String endWith ="//input[@value=\"Log in\"]";

            //Will hold all the data values available in the excel sheet and set them to their corressponding TestLinkIntegration model 
            List<TestLinkIntegration> arrayList = new ArrayList<>();

            arrayList = readbook.readBooksFromExcelFile(TEST_SCRIPT_URL);

            //Counter to record the total number of test cases looped
            totalNoTCs = 0;
            for (TestLinkIntegration testLinkIntegration : arrayList) {
                
                //System.err.println("--------------------Case 1---------");
                //System.err.println("----------Action---"+testLinkIntegration.getAction()+"-------Case 1---------\n"); 
                try {

                    //jButton6.setEnabled(false);
                    
                    startTime = System.currentTimeMillis();
                    //Maximizes the browser window
                    driver.manage().window().maximize();

                    //driver.manage().window().maximize();
                    switch (testLinkIntegration.getAction()) {
                        case "Get": {

                            // System.err.println("----------Action---"+testLinkIntegration.getArgumanets1()+"-------Case 1---------"); 
                            driver.get(testLinkIntegration.getArgumanets1());    //testLinkIntegration.getArgumanets1()   
                            driver.manage().timeouts().implicitlyWait(30l, TimeUnit.SECONDS);
                            driver.switchTo().defaultContent();

                            totalNoTCs = arrayList.size();
                            result = TestLinkAPIResults.TEST_PASSED;
                            notes = "Executed successfully";
                            textArea.setForeground(Color.WHITE);
                            textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                            updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            //wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText("+Testlink")));  
                            break;
                        }
                        case "Select": {
                            //Select by Visible Text (select all options that display text matching the argument)
                            Select dropdown = new Select(driver.findElement(By.id("mySelect")));

                            dropdown.selectByVisibleText(testLinkIntegration.getArgumanets1());

                            totalNoTCs = arrayList.size();
                            result = TestLinkAPIResults.TEST_PASSED;
                            notes = "Executed successfully";
                            textArea.setForeground(Color.WHITE);
                            textArea.append(TestResults.testConsoleResults(totalNoTCs, nopagetitle, result));

                            updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            break;
                        }
                        case "Find": {

                            driver.findElement(By.id(testLinkIntegration.getArgumanets1())).sendKeys(testLinkIntegration.getArgumanets2());

                            totalNoTCs = arrayList.size();
                            result = TestLinkAPIResults.TEST_PASSED;
                            notes = "Executed successfully";
                            textArea.setForeground(Color.WHITE);
                            textArea.append(TestResults.testConsoleResults(totalNoTCs, nopagetitle, result));

                            updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            break;
                        }
                        case "Current URL": {
                            if (driver.getCurrentUrl().equals(testLinkIntegration.getArgumanets2())) {

                                totalNoTCs = arrayList.size();
                                result = TestLinkAPIResults.TEST_PASSED;
                                notes = "Executed successfully";
                                textArea.setForeground(Color.WHITE);
                                textArea.append(TestResults.testConsoleResults(totalNoTCs, nopagetitle, result));

                                updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            } else {
                                totalNoTCs = arrayList.size();
                                result = TestLinkAPIResults.TEST_FAILED;
                                notes = "Execution failed";
                                textArea.setForeground(Color.WHITE);
                                textArea.append(TestResults.testConsoleResults(totalNoTCs, nopagetitle, result));

                                updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            }

                            break;
                        }
                        case "Get Title": {
                            //Gets the title of the website and compare to that requested by Business
                            if (driver.getTitle().equals(testLinkIntegration.getArgumanets2())) {
                                totalNoTCs = arrayList.size();
                                result = TestLinkAPIResults.TEST_PASSED;
                                notes = "Executed successfully";
                                textArea.setForeground(Color.WHITE);
                                textArea.append(TestResults.testConsoleResults(totalNoTCs, nopagetitle, result));

                                updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            } else {
                                totalNoTCs = arrayList.size();
                                result = TestLinkAPIResults.TEST_FAILED;
                                notes = "Execution failed";
                                textArea.setForeground(Color.WHITE);
                                textArea.append(TestResults.testConsoleResults(totalNoTCs, nopagetitle, result));

                                updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            }
                            break;

                        }
                        case "Click Link": {
                            //Find links in the web page and click or follow the URL/URI
                            driver.findElement(By.linkText(testLinkIntegration.getArgumanets1())).click();
                            if (driver.getCurrentUrl().equals(testLinkIntegration.getArgumanets2())) {

                                totalNoTCs = arrayList.size();
                                result = TestLinkAPIResults.TEST_PASSED;
                                notes = "Executed successfully";
                                textArea.setForeground(Color.WHITE);
                                textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                                updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            } else {
                                totalNoTCs = arrayList.size();
                                result = TestLinkAPIResults.TEST_FAILED;
                                notes = "Execution failed";
                                textArea.setForeground(Color.WHITE);
                                textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                                updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            }
                            totalNoTCs = arrayList.size();
                            result = TestLinkAPIResults.TEST_PASSED;
                            notes = "Executed successfully";
                            textArea.setForeground(Color.WHITE);
                            textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                            updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            break;

                        }
                        case "Click Links": {
                            //Find links in the page(Accessing links using a portion of their link text)
                            driver.findElement(By.partialLinkText(testLinkIntegration.getArgumanets1())).click();

                            if (driver.getCurrentUrl().equals(testLinkIntegration.getArgumanets2())) {
                                totalNoTCs = arrayList.size();
                                result = TestLinkAPIResults.TEST_PASSED;
                                notes = "Executed successfully";
                                textArea.setForeground(Color.WHITE);
                                textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                                updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            } else {

                                totalNoTCs = arrayList.size();
                                result = TestLinkAPIResults.TEST_FAILED;
                                notes = "Execution failed";
                                textArea.setForeground(Color.WHITE);
                                textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                                updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            }
                            totalNoTCs = arrayList.size();
                            result = TestLinkAPIResults.TEST_PASSED;
                            notes = "Executed successfully";
                            textArea.setForeground(Color.WHITE);
                            textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                            updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            break;

                        }
                        case "Login": {
                            //driver.FindElement(By.LinkText("Google")).Click();
                            //driver.findElement(By.className("btn btn-save")).click();
                            //driver.findElement(By.xpath("//input[@value="+testLinkIntegration.getArgumanets1()+"]")).click();
                            driver.findElement(By.id("new_user")).click();
                            // driver.findElement(By.id("//input[@value='"+testLinkIntegration.getArgumanets1()+"']")).click();
                            totalNoTCs = arrayList.size();
                            result = TestLinkAPIResults.TEST_PASSED;
                            notes = "Executed successfully";
                            textArea.setForeground(Color.WHITE);
                            textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                            updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            break;

                        }
                        case "Submit": {

                            driver.findElement(By.id("//input[@value='" + testLinkIntegration.getArgumanets1() + "']")).click();

                            totalNoTCs = arrayList.size();
                            result = TestLinkAPIResults.TEST_PASSED;
                            notes = "Executed successfully";
                            textArea.setForeground(Color.WHITE);
                            textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                            updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
                            break;

                        }

                    }

                    //driver.manage().timeouts().implicitlyWait(25, TimeUnit.SECONDS);
                    // driver.get(testLinkIntegration.getArgumanets1());
                    //driver.switchTo().defaultContent();
                    //wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText("+Testlink")));
                } catch (TestLinkAPIException | testlink.api.java.client.TestLinkAPIException e) {

                    totalNoTCs = arrayList.size();
                    result = TestLinkAPIResults.TEST_FAILED;
                    notes = "Execution failed";
                    textArea.setForeground(Color.WHITE);
                    textArea.append(TestResults.testConsoleResults(totalNoTCs, driver.getTitle(), result));

                    updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);

                }
//                finally {
//
//                    updateTestLinkResults(testLinkIntegration.getTestCaseName(), notes, result);
//                    //driver.close();
//                }
                totalNoTCs = arrayList.size();
            }
            endTime = System.currentTimeMillis();
            totalTime = 0;
            totalTime = (endTime - startTime) / 1000;
            // Close the main window
            afterTest();
        }
    }

    public static void updateTestLinkResults(String testcases, String exception, String results) throws TestLinkAPIException, testlink.api.java.client.TestLinkAPIException {
//String testCaseName, 

        ReadConfigFile prop = new ReadConfigFile();
        TESTLINK_KEY = prop.getPropertyValue("testlink_key");
        TESTLINK_URL = prop.getPropertyValue("testlink_url");

        //prop.readProperties()
        TestLinkAPIClient testLink = new TestLinkAPIClient(TESTLINK_KEY, TESTLINK_URL);
        if (testLink.isConnected == true) {
            //testLink.getProjects();
            testLink.reportTestCaseResult(TEST_PROJECT_NAME, TEST_PLAN_NAME, testcases, BUILD_NAME, exception, results);
        } else {

            System.out.println("Error! Connection with TestLink not well Established.\n"
                    + " Check your properties file.");
        }

        //testLink.isConnected
    }

}
